% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weight-functions.R
\name{make_weights_generic}
\alias{make_weights_generic}
\title{Generic weight builder for parametric GWAS}
\usage{
make_weights_generic(
  taus,
  q_tau,
  dist_cdf,
  dist_pdf,
  params,
  grad_funcs,
  tiny = 1e-12
)
}
\arguments{
\item{taus}{Numeric vector of quantile levels (length T).}

\item{q_tau}{Numeric vector of baseline quantiles at \code{taus} (length T).}

\item{dist_cdf}{Function (y, params) -> numeric. CDF of the distribution.}

\item{dist_pdf}{Function (y, params) -> numeric. PDF of the distribution.}

\item{params}{Named list of baseline parameters (e.g., \code{list(mu = 0, sd = 1)}).}

\item{grad_funcs}{Named list of gradient functions. Each element is a function
(y, params) -> numeric giving derivative of F(y; params) wrt that parameter.
Can be analytic, or constructed with \code{make_fd_grad()}.}

\item{tiny}{Small positive floor to stabilize divisions (\eqn{f(q_tau)} clamped).}
}
\value{
A T x K numeric matrix of weights with columns named by parameter.
}
\description{
Constructs a tau-by-K weight matrix \eqn{W} for an arbitrary parametric family,
mapping RIF tau-slopes \eqn{b(tau)} into parameter effects.
}
\details{
The generic approach uses the identity:
\deqn{W_j(tau) = - (dF/dtheta_j)(q_tau; params) / f(q_tau; params),}
where \eqn{F} is the CDF and \eqn{f} is the PDF.
}
\examples{
taus <- seq(0.1, 0.9, 0.1)
y <- rnorm(5000, 2, 1)
q_tau <- as.numeric(quantile(y, taus, type = 8))

dist_cdf <- function(y, params) pnorm(y, mean = params$mu, sd = params$sd)
dist_pdf <- function(y, params) dnorm(y, mean = params$mu, sd = params$sd)
grad_mu  <- function(y, params) -dnorm((y - params$mu)/params$sd)/params$sd
grad_sd  <- function(y, params) { z <- (y - params$mu)/params$sd; -(z*dnorm(z))/params$sd }

W <- make_weights_generic(
  taus, q_tau, dist_cdf, dist_pdf,
  params = list(mu = 2, sd = 1),
  grad_funcs = list(beta_mu = grad_mu, beta_sd = grad_sd)
)

}
