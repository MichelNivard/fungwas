% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weight-functions.R
\name{make_weights_normal_mixture_vqtl}
\alias{make_weights_normal_mixture_vqtl}
\title{Build tau-by-K weights for a two-component Normal mixture with mean, variance, and membership effects}
\usage{
make_weights_normal_mixture_vqtl(
  taus,
  q_tau,
  p1,
  mu1,
  sd1,
  mu2,
  sd2,
  tiny = 1e-12
)
}
\arguments{
\item{taus}{Numeric vector of quantile levels (length T).}

\item{q_tau}{Numeric vector of baseline quantiles of Y at \code{taus} (length T, \code{type=8} recommended).}

\item{p1}{Proportion of component 1 (in (0,1)); component 2 proportion = 1 - p1.}

\item{mu1, sd1}{Mean and sd of component 1.}

\item{mu2, sd2}{Mean and sd of component 2.}

\item{tiny}{Small positive floor to stabilize divisions (mixture pdf clamped to at least \code{tiny}).}
}
\value{
A T x 5 numeric matrix \code{W} with columns:
\code{c("gamma","beta_mu1","beta_mu2","beta_sigma1","beta_sigma2")}.
}
\description{
Constructs a weight matrix \code{W} that maps RIF tau-slopes \eqn{b(tau)}
into SNP effects on the parameters of a two-component Normal mixture:
\deqn{Y ~ p1 * N(mu1, sd1^2) + (1 - p1) * N(mu2, sd2^2).}
}
\details{
Supported SNP effect targets:
\itemize{
\item \code{gamma}: log-odds of membership in component 1 (class proportion).
\item \code{beta_mu1}, \code{beta_mu2}: effects on the component means.
\item \code{beta_sigma1}, \code{beta_sigma2}: effects on the component standard deviations.
}

For baseline quantiles \eqn{q_tau} and mixture pdf
\deqn{f(q) = p1 f1(q) + (1 - p1) f2(q),}
where \eqn{f1, f2} are the component pdfs and \eqn{F1, F2} their CDFs, the weights are:
\itemize{
\item Membership:
\deqn{W_gamma(tau) = - (p1 * (1 - p1) / f(q_tau)) * (F1(q_tau) - F2(q_tau))}
\item Means:
\deqn{W_mu1(tau) = (p1 * f1(q_tau)) / f(q_tau), \quad
        W_mu2(tau) = ((1 - p1) * f2(q_tau)) / f(q_tau)}
\item Standard deviations:
\deqn{W_sigma1(tau) = (p1 * f1(q_tau) * (q_tau - mu1) / sd1) / f(q_tau),}
\deqn{W_sigma2(tau) = ((1 - p1) * f2(q_tau) * (q_tau - mu2) / sd2) / f(q_tau).}
}

These arise from the derivative of the mixture CDF with respect to each parameter,
mapped into the quantile effect scale via the implicit function theorem.
}
\examples{
taus <- seq(0.1, 0.9, 0.1)
set.seed(1)
y <- c(rnorm(500, 1.2, 0.6), rnorm(500, 3.0, 0.9))
q_tau <- as.numeric(quantile(y, taus, type = 8))
W <- make_weights_normal_mixture_vqtl(
  taus, q_tau,
  p1 = 0.5, mu1 = 1.2, sd1 = 0.6,
  mu2 = 3.0, sd2 = 0.9
)
head(W)
}
